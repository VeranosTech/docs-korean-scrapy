# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-13 13:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../docs/topics/loaders.rst:5
msgid "Item Loaders"
msgstr ""

#: ../docs/topics/loaders.rst:10
msgid ""
"Item Loaders provide a convenient mechanism for populating scraped "
":ref:`Items <topics-items>`. Even though Items can be populated using "
"their own dictionary-like API, Item Loaders provide a much more "
"convenient API for populating them from a scraping process, by automating"
" some common tasks like parsing the raw extracted data before assigning "
"it."
msgstr ""

#: ../docs/topics/loaders.rst:16
msgid ""
"In other words, :ref:`Items <topics-items>` provide the *container* of "
"scraped data, while Item Loaders provide the mechanism for *populating* "
"that container."
msgstr ""

#: ../docs/topics/loaders.rst:20
msgid ""
"Item Loaders are designed to provide a flexible, efficient and easy "
"mechanism for extending and overriding different field parsing rules, "
"either by spider, or by source format (HTML, XML, etc) without becoming a"
" nightmare to maintain."
msgstr ""

#: ../docs/topics/loaders.rst:25
msgid "Using Item Loaders to populate items"
msgstr ""

#: ../docs/topics/loaders.rst:27
msgid ""
"To use an Item Loader, you must first instantiate it. You can either "
"instantiate it with a dict-like object (e.g. Item or dict) or without "
"one, in which case an Item is automatically instantiated in the Item "
"Loader constructor using the Item class specified in the "
":attr:`ItemLoader.default_item_class` attribute."
msgstr ""

#: ../docs/topics/loaders.rst:33
msgid ""
"Then, you start collecting values into the Item Loader, typically using "
":ref:`Selectors <topics-selectors>`. You can add more than one value to "
"the same item field; the Item Loader will know how to \"join\" those "
"values later using a proper processing function."
msgstr ""

#: ../docs/topics/loaders.rst:38
msgid ""
"Here is a typical Item Loader usage in a :ref:`Spider <topics-spiders>`, "
"using the :ref:`Product item <topics-items-declaring>` declared in the "
":ref:`Items chapter <topics-items>`::"
msgstr ""

#: ../docs/topics/loaders.rst:54
msgid ""
"By quickly looking at that code, we can see the ``name`` field is being "
"extracted from two different XPath locations in the page:"
msgstr ""

#: ../docs/topics/loaders.rst:57
msgid "``//div[@class=\"product_name\"]``"
msgstr ""

#: ../docs/topics/loaders.rst:58
msgid "``//div[@class=\"product_title\"]``"
msgstr ""

#: ../docs/topics/loaders.rst:60
msgid ""
"In other words, data is being collected by extracting it from two XPath "
"locations, using the :meth:`~ItemLoader.add_xpath` method. This is the "
"data that will be assigned to the ``name`` field later."
msgstr ""

#: ../docs/topics/loaders.rst:64
msgid ""
"Afterwards, similar calls are used for ``price`` and ``stock`` fields "
"(the latter using a CSS selector with the :meth:`~ItemLoader.add_css` "
"method), and finally the ``last_update`` field is populated directly with"
" a literal value (``today``) using a different method: "
":meth:`~ItemLoader.add_value`."
msgstr ""

#: ../docs/topics/loaders.rst:69
msgid ""
"Finally, when all data is collected, the :meth:`ItemLoader.load_item` "
"method is called which actually returns the item populated with the data "
"previously extracted and collected with the "
":meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, and "
":meth:`~ItemLoader.add_value` calls."
msgstr ""

#: ../docs/topics/loaders.rst:77
msgid "Input and Output processors"
msgstr ""

#: ../docs/topics/loaders.rst:79
msgid ""
"An Item Loader contains one input processor and one output processor for "
"each (item) field. The input processor processes the extracted data as "
"soon as it's received (through the :meth:`~ItemLoader.add_xpath`, "
":meth:`~ItemLoader.add_css` or :meth:`~ItemLoader.add_value` methods) and"
" the result of the input processor is collected and kept inside the "
"ItemLoader. After collecting all data, the :meth:`ItemLoader.load_item` "
"method is called to populate and get the populated "
":class:`~scrapy.item.Item` object.  That's when the output processor is "
"called with the data previously collected (and processed using the input "
"processor). The result of the output processor is the final value that "
"gets assigned to the item."
msgstr ""

#: ../docs/topics/loaders.rst:90
msgid ""
"Let's see an example to illustrate how the input and output processors "
"are called for a particular field (the same applies for any other "
"field)::"
msgstr ""

#: ../docs/topics/loaders.rst:100
msgid "So what happens is:"
msgstr ""

#: ../docs/topics/loaders.rst:102
msgid ""
"Data from ``xpath1`` is extracted, and passed through the *input "
"processor* of the ``name`` field. The result of the input processor is "
"collected and kept in the Item Loader (but not yet assigned to the item)."
msgstr ""

#: ../docs/topics/loaders.rst:106
msgid ""
"Data from ``xpath2`` is extracted, and passed through the same *input "
"processor* used in (1). The result of the input processor is appended to "
"the data collected in (1) (if any)."
msgstr ""

#: ../docs/topics/loaders.rst:110
msgid ""
"This case is similar to the previous ones, except that the data is "
"extracted from the ``css`` CSS selector, and passed through the same "
"*input processor* used in (1) and (2). The result of the input processor "
"is appended to the data collected in (1) and (2) (if any)."
msgstr ""

#: ../docs/topics/loaders.rst:115
msgid ""
"This case is also similar to the previous ones, except that the value to "
"be collected is assigned directly, instead of being extracted from a "
"XPath expression or a CSS selector. However, the value is still passed "
"through the input processors. In this case, since the value is not "
"iterable it is converted to an iterable of a single element before "
"passing it to the input processor, because input processor always receive"
" iterables."
msgstr ""

#: ../docs/topics/loaders.rst:123
msgid ""
"The data collected in steps (1), (2), (3) and (4) is passed through the "
"*output processor* of the ``name`` field. The result of the output "
"processor is the value assigned to the ``name`` field in the item."
msgstr ""

#: ../docs/topics/loaders.rst:128
msgid ""
"It's worth noticing that processors are just callable objects, which are "
"called with the data to be parsed, and return a parsed value. So you can "
"use any function as input or output processor. The only requirement is "
"that they must accept one (and only one) positional argument, which will "
"be an iterator."
msgstr ""

#: ../docs/topics/loaders.rst:133
msgid ""
"Both input and output processors must receive an iterator as their first "
"argument. The output of those functions can be anything. The result of "
"input processors will be appended to an internal list (in the Loader) "
"containing the collected values (for that field). The result of the "
"output processors is the value that will be finally assigned to the item."
msgstr ""

#: ../docs/topics/loaders.rst:139
msgid ""
"The other thing you need to keep in mind is that the values returned by "
"input processors are collected internally (in lists) and then passed to "
"output processors to populate the fields."
msgstr ""

#: ../docs/topics/loaders.rst:143
msgid ""
"Last, but not least, Scrapy comes with some :ref:`commonly used "
"processors <topics-loaders-available-processors>` built-in for "
"convenience."
msgstr ""

#: ../docs/topics/loaders.rst:148
msgid "Declaring Item Loaders"
msgstr ""

#: ../docs/topics/loaders.rst:150
msgid ""
"Item Loaders are declared like Items, by using a class definition syntax."
" Here is an example::"
msgstr ""

#: ../docs/topics/loaders.rst:167
msgid ""
"As you can see, input processors are declared using the ``_in`` suffix "
"while output processors are declared using the ``_out`` suffix. And you "
"can also declare a default input/output processors using the "
":attr:`ItemLoader.default_input_processor` and "
":attr:`ItemLoader.default_output_processor` attributes."
msgstr ""

#: ../docs/topics/loaders.rst:176
msgid "Declaring Input and Output Processors"
msgstr ""

#: ../docs/topics/loaders.rst:178
msgid ""
"As seen in the previous section, input and output processors can be "
"declared in the Item Loader definition, and it's very common to declare "
"input processors this way. However, there is one more place where you can"
" specify the input and output processors to use: in the :ref:`Item Field "
"<topics-items-fields>` metadata. Here is an example::"
msgstr ""

#: ../docs/topics/loaders.rst:211
msgid "The precedence order, for both input and output processors, is as follows:"
msgstr ""

#: ../docs/topics/loaders.rst:213
msgid ""
"Item Loader field-specific attributes: ``field_in`` and ``field_out`` "
"(most precedence)"
msgstr ""

#: ../docs/topics/loaders.rst:215
msgid "Field metadata (``input_processor`` and ``output_processor`` key)"
msgstr ""

#: ../docs/topics/loaders.rst:216
msgid ""
"Item Loader defaults: :meth:`ItemLoader.default_input_processor` and "
":meth:`ItemLoader.default_output_processor` (least precedence)"
msgstr ""

#: ../docs/topics/loaders.rst:219
msgid "See also: :ref:`topics-loaders-extending`."
msgstr ""

#: ../docs/topics/loaders.rst:224
msgid "Item Loader Context"
msgstr ""

#: ../docs/topics/loaders.rst:226
msgid ""
"The Item Loader Context is a dict of arbitrary key/values which is shared"
" among all input and output processors in the Item Loader. It can be "
"passed when declaring, instantiating or using Item Loader. They are used "
"to modify the behaviour of the input/output processors."
msgstr ""

#: ../docs/topics/loaders.rst:231
msgid ""
"For example, suppose you have a function ``parse_length`` which receives "
"a text value and extracts a length from it::"
msgstr ""

#: ../docs/topics/loaders.rst:239
msgid ""
"By accepting a ``loader_context`` argument the function is explicitly "
"telling the Item Loader that it's able to receive an Item Loader context,"
" so the Item Loader passes the currently active context when calling it, "
"and the processor function (``parse_length`` in this case) can thus use "
"them."
msgstr ""

#: ../docs/topics/loaders.rst:244
msgid "There are several ways to modify Item Loader context values:"
msgstr ""

#: ../docs/topics/loaders.rst:246
msgid ""
"By modifying the currently active Item Loader context "
"(:attr:`~ItemLoader.context` attribute)::"
msgstr ""

#: ../docs/topics/loaders.rst:252
msgid ""
"On Item Loader instantiation (the keyword arguments of Item Loader "
"constructor are stored in the Item Loader context)::"
msgstr ""

#: ../docs/topics/loaders.rst:257
msgid ""
"On Item Loader declaration, for those input/output processors that "
"support instantiating them with an Item Loader context. "
":class:`~processor.MapCompose` is one of them::"
msgstr ""

#: ../docs/topics/loaders.rst:266
msgid "ItemLoader objects"
msgstr ""

#: ../docs/topics/loaders.rst:270
msgid ""
"Return a new Item Loader for populating the given Item. If no item is "
"given, one is instantiated automatically using the class in "
":attr:`default_item_class`."
msgstr ""

#: ../docs/topics/loaders.rst:274
msgid ""
"When instantiated with a `selector` or a `response` parameters the "
":class:`ItemLoader` class provides convenient mechanisms for extracting "
"data from web pages using :ref:`selectors <topics-selectors>`."
msgstr ""

#: ../docs/topics/loaders.rst
msgid "Parameters"
msgstr ""

#: ../docs/topics/loaders.rst:278
msgid ""
"The item instance to populate using subsequent calls to "
":meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, or "
":meth:`~ItemLoader.add_value`."
msgstr ""

#: ../docs/topics/loaders.rst:283
msgid ""
"The selector to extract data from, when using the :meth:`add_xpath` "
"(resp. :meth:`add_css`) or :meth:`replace_xpath` (resp. "
":meth:`replace_css`) method."
msgstr ""

#: ../docs/topics/loaders.rst:288
msgid ""
"The response used to construct the selector using the "
":attr:`default_selector_class`, unless the selector argument is given, in"
" which case this argument is ignored."
msgstr ""

#: ../docs/topics/loaders.rst:293
msgid ""
"The item, selector, response and the remaining keyword arguments are "
"assigned to the Loader context (accessible through the :attr:`context` "
"attribute)."
msgstr ""

#: ../docs/topics/loaders.rst:296
msgid ":class:`ItemLoader` instances have the following methods:"
msgstr ""

#: ../docs/topics/loaders.rst:300
msgid ""
"Process the given ``value`` by the given ``processors`` and keyword "
"arguments."
msgstr ""

#: ../docs/topics/loaders.rst:303
msgid "Available keyword arguments:"
msgstr ""

#: ../docs/topics/loaders.rst:305
msgid ""
"a regular expression to use for extracting data from the given value "
"using :meth:`~scrapy.utils.misc.extract_regex` method, applied before "
"processors"
msgstr ""

#: ../docs/topics/loaders.rst:310 ../docs/topics/loaders.rst:330
#: ../docs/topics/loaders.rst:355 ../docs/topics/loaders.rst:373
#: ../docs/topics/loaders.rst:398 ../docs/topics/loaders.rst:416
#: ../docs/topics/loaders.rst:661
msgid "Examples::"
msgstr ""

#: ../docs/topics/loaders.rst:318
msgid "Process and then add the given ``value`` for the given field."
msgstr ""

#: ../docs/topics/loaders.rst:320
msgid ""
"The value is first passed through :meth:`get_value` by giving the "
"``processors`` and ``kwargs``, and then passed through the :ref:`field "
"input processor <topics-loaders-processors>` and its result appended to "
"the data collected for that field. If the field already contains "
"collected data, the new data is added."
msgstr ""

#: ../docs/topics/loaders.rst:326
msgid ""
"The given ``field_name`` can be ``None``, in which case values for "
"multiple fields may be added. And the processed value should be a dict "
"with field_name mapped to values."
msgstr ""

#: ../docs/topics/loaders.rst:340
msgid ""
"Similar to :meth:`add_value` but replaces the collected data with the new"
" value instead of adding it."
msgstr ""

#: ../docs/topics/loaders.rst:344
msgid ""
"Similar to :meth:`ItemLoader.get_value` but receives an XPath instead of "
"a value, which is used to extract a list of unicode strings from the "
"selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../docs/topics/loaders.rst:348 ../docs/topics/loaders.rst:370
msgid "the XPath to extract data from"
msgstr ""

#: ../docs/topics/loaders.rst:351
msgid ""
"a regular expression to use for extracting data from the selected XPath "
"region"
msgstr ""

#: ../docs/topics/loaders.rst:364
msgid ""
"Similar to :meth:`ItemLoader.add_value` but receives an XPath instead of "
"a value, which is used to extract a list of unicode strings from the "
"selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../docs/topics/loaders.rst:368
msgid "See :meth:`get_xpath` for ``kwargs``."
msgstr ""

#: ../docs/topics/loaders.rst:382
msgid ""
"Similar to :meth:`add_xpath` but replaces collected data instead of "
"adding it."
msgstr ""

#: ../docs/topics/loaders.rst:387
msgid ""
"Similar to :meth:`ItemLoader.get_value` but receives a CSS selector "
"instead of a value, which is used to extract a list of unicode strings "
"from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../docs/topics/loaders.rst:391 ../docs/topics/loaders.rst:413
msgid "the CSS selector to extract data from"
msgstr ""

#: ../docs/topics/loaders.rst:394
msgid ""
"a regular expression to use for extracting data from the selected CSS "
"region"
msgstr ""

#: ../docs/topics/loaders.rst:407
msgid ""
"Similar to :meth:`ItemLoader.add_value` but receives a CSS selector "
"instead of a value, which is used to extract a list of unicode strings "
"from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../docs/topics/loaders.rst:411
msgid "See :meth:`get_css` for ``kwargs``."
msgstr ""

#: ../docs/topics/loaders.rst:425
msgid ""
"Similar to :meth:`add_css` but replaces collected data instead of adding "
"it."
msgstr ""

#: ../docs/topics/loaders.rst:430
msgid ""
"Populate the item with the data collected so far, and return it. The data"
" collected is first passed through the :ref:`output processors <topics-"
"loaders-processors>` to get the final value to assign to each item field."
msgstr ""

#: ../docs/topics/loaders.rst:437
msgid ""
"Create a nested loader with an xpath selector. The supplied selector is "
"applied relative to selector associated with this :class:`ItemLoader`. "
"The nested loader shares the :class:`Item` with the parent "
":class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, "
":meth:`replace_value`, etc. will behave as expected."
msgstr ""

#: ../docs/topics/loaders.rst:445
msgid ""
"Create a nested loader with a css selector. The supplied selector is "
"applied relative to selector associated with this :class:`ItemLoader`. "
"The nested loader shares the :class:`Item` with the parent "
":class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, "
":meth:`replace_value`, etc. will behave as expected."
msgstr ""

#: ../docs/topics/loaders.rst:453
msgid "Return the collected values for the given field."
msgstr ""

#: ../docs/topics/loaders.rst:457
msgid ""
"Return the collected values parsed using the output processor, for the "
"given field. This method doesn't populate or modify the item at all."
msgstr ""

#: ../docs/topics/loaders.rst:462
msgid "Return the input processor for the given field."
msgstr ""

#: ../docs/topics/loaders.rst:466
msgid "Return the output processor for the given field."
msgstr ""

#: ../docs/topics/loaders.rst:468
msgid ":class:`ItemLoader` instances have the following attributes:"
msgstr ""

#: ../docs/topics/loaders.rst:472
msgid "The :class:`~scrapy.item.Item` object being parsed by this Item Loader."
msgstr ""

#: ../docs/topics/loaders.rst:476
msgid ""
"The currently active :ref:`Context <topics-loaders-context>` of this Item"
" Loader."
msgstr ""

#: ../docs/topics/loaders.rst:481
msgid ""
"An Item class (or factory), used to instantiate items when not given in "
"the constructor."
msgstr ""

#: ../docs/topics/loaders.rst:486
msgid ""
"The default input processor to use for those fields which don't specify "
"one."
msgstr ""

#: ../docs/topics/loaders.rst:491
msgid ""
"The default output processor to use for those fields which don't specify "
"one."
msgstr ""

#: ../docs/topics/loaders.rst:496
msgid ""
"The class used to construct the :attr:`selector` of this "
":class:`ItemLoader`, if only a response is given in the constructor. If a"
" selector is given in the constructor this attribute is ignored. This "
"attribute is sometimes overridden in subclasses."
msgstr ""

#: ../docs/topics/loaders.rst:503
msgid ""
"The :class:`~scrapy.selector.Selector` object to extract data from. It's "
"either the selector given in the constructor or one created from the "
"response given in the constructor using the "
":attr:`default_selector_class`. This attribute is meant to be read-only."
msgstr ""

#: ../docs/topics/loaders.rst:512
msgid "Nested Loaders"
msgstr ""

#: ../docs/topics/loaders.rst:514
msgid ""
"When parsing related values from a subsection of a document, it can be "
"useful to create nested loaders.  Imagine you're extracting details from "
"a footer of a page that looks something like:"
msgstr ""

#: ../docs/topics/loaders.rst:518 ../docs/topics/loaders.rst:529
#: ../docs/topics/loaders.rst:541 ../docs/topics/loaders.rst:633
#: ../docs/topics/loaders.rst:646 ../docs/topics/loaders.rst:682
#: ../docs/topics/loaders.rst:746
msgid "Example::"
msgstr ""

#: ../docs/topics/loaders.rst:526
msgid ""
"Without nested loaders, you need to specify the full xpath (or css) for "
"each value that you wish to extract."
msgstr ""

#: ../docs/topics/loaders.rst:537
msgid ""
"Instead, you can create a nested loader with the footer selector and add "
"values relative to the footer.  The functionality is the same but you "
"avoid repeating the footer selector."
msgstr ""

#: ../docs/topics/loaders.rst:551
msgid ""
"You can nest loaders arbitrarily and they work with either xpath or css "
"selectors. As a general guideline, use nested loaders when they make your"
" code simpler but do not go overboard with nesting or your parser can "
"become difficult to read."
msgstr ""

#: ../docs/topics/loaders.rst:558
msgid "Reusing and extending Item Loaders"
msgstr ""

#: ../docs/topics/loaders.rst:560
msgid ""
"As your project grows bigger and acquires more and more spiders, "
"maintenance becomes a fundamental problem, especially when you have to "
"deal with many different parsing rules for each spider, having a lot of "
"exceptions, but also wanting to reuse the common processors."
msgstr ""

#: ../docs/topics/loaders.rst:565
msgid ""
"Item Loaders are designed to ease the maintenance burden of parsing "
"rules, without losing flexibility and, at the same time, providing a "
"convenient mechanism for extending and overriding them. For this reason "
"Item Loaders support traditional Python class inheritance for dealing "
"with differences of specific spiders (or groups of spiders)."
msgstr ""

#: ../docs/topics/loaders.rst:571
msgid ""
"Suppose, for example, that some particular site encloses their product "
"names in three dashes (e.g. ``---Plasma TV---``) and you don't want to "
"end up scraping those dashes in the final product names."
msgstr ""

#: ../docs/topics/loaders.rst:575
msgid ""
"Here's how you can remove those dashes by reusing and extending the "
"default Product Item Loader (``ProductLoader``)::"
msgstr ""

#: ../docs/topics/loaders.rst:587
msgid ""
"Another case where extending Item Loaders can be very helpful is when you"
" have multiple source formats, for example XML and HTML. In the XML "
"version you may want to remove ``CDATA`` occurrences. Here's an example "
"of how to do it::"
msgstr ""

#: ../docs/topics/loaders.rst:598
msgid "And that's how you typically extend input processors."
msgstr ""

#: ../docs/topics/loaders.rst:600
msgid ""
"As for output processors, it is more common to declare them in the field "
"metadata, as they usually depend only on the field and not on each "
"specific site parsing rule (as input processors do). See also: :ref"
":`topics-loaders-processors-declaring`."
msgstr ""

#: ../docs/topics/loaders.rst:605
msgid ""
"There are many other possible ways to extend, inherit and override your "
"Item Loaders, and different Item Loaders hierarchies may fit better for "
"different projects. Scrapy only provides the mechanism; it doesn't impose"
" any specific organization of your Loaders collection - that's up to you "
"and your project's needs."
msgstr ""

#: ../docs/topics/loaders.rst:614
msgid "Available built-in processors"
msgstr ""

#: ../docs/topics/loaders.rst:619
msgid ""
"Even though you can use any callable function as input and output "
"processors, Scrapy provides some commonly used processors, which are "
"described below. Some of them, like the :class:`MapCompose` (which is "
"typically used as input processor) compose the output of several "
"functions executed in order, to produce the final parsed value."
msgstr ""

#: ../docs/topics/loaders.rst:625
msgid "Here is a list of all built-in processors:"
msgstr ""

#: ../docs/topics/loaders.rst:629
msgid ""
"The simplest processor, which doesn't do anything. It returns the "
"original values unchanged. It doesn't receive any constructor arguments, "
"nor does it accept Loader contexts."
msgstr ""

#: ../docs/topics/loaders.rst:642
msgid ""
"Returns the first non-null/non-empty value from the values received, so "
"it's typically used as an output processor to single-valued fields. It "
"doesn't receive any constructor arguments, nor does it accept Loader "
"contexts."
msgstr ""

#: ../docs/topics/loaders.rst:655
msgid ""
"Returns the values joined with the separator given in the constructor, "
"which defaults to ``u' '``. It doesn't accept Loader contexts."
msgstr ""

#: ../docs/topics/loaders.rst:658
msgid ""
"When using the default separator, this processor is equivalent to the "
"function: ``u' '.join``"
msgstr ""

#: ../docs/topics/loaders.rst:673
msgid ""
"A processor which is constructed from the composition of the given "
"functions. This means that each input value of this processor is passed "
"to the first function, and the result of that function is passed to the "
"second function, and so on, until the last function returns the output "
"value of this processor."
msgstr ""

#: ../docs/topics/loaders.rst:679
msgid ""
"By default, stop process on ``None`` value. This behaviour can be changed"
" by passing keyword argument ``stop_on_none=False``."
msgstr ""

#: ../docs/topics/loaders.rst:689
msgid ""
"Each function can optionally receive a ``loader_context`` parameter. For "
"those which do, this processor will pass the currently active "
":ref:`Loader context <topics-loaders-context>` through that parameter."
msgstr ""

#: ../docs/topics/loaders.rst:693
msgid ""
"The keyword arguments passed in the constructor are used as the default "
"Loader context values passed to each function call. However, the final "
"Loader context values passed to functions are overridden with the "
"currently active Loader context accessible through the "
":meth:`ItemLoader.context` attribute."
msgstr ""

#: ../docs/topics/loaders.rst:701
msgid ""
"A processor which is constructed from the composition of the given "
"functions, similar to the :class:`Compose` processor. The difference with"
" this processor is the way internal results are passed among functions, "
"which is as follows:"
msgstr ""

#: ../docs/topics/loaders.rst:706
msgid ""
"The input value of this processor is *iterated* and the first function is"
" applied to each element. The results of these function calls (one for "
"each element) are concatenated to construct a new iterable, which is then"
" used to apply the second function, and so on, until the last function is"
" applied to each value of the list of values collected so far. The output"
" values of the last function are concatenated together to produce the "
"output of this processor."
msgstr ""

#: ../docs/topics/loaders.rst:713
msgid ""
"Each particular function can return a value or a list of values, which is"
" flattened with the list of values returned by the same function applied "
"to the other input values. The functions can also return ``None`` in "
"which case the output of that function is ignored for further processing "
"over the chain."
msgstr ""

#: ../docs/topics/loaders.rst:719
msgid ""
"This processor provides a convenient way to compose functions that only "
"work with single values (instead of iterables). For this reason the "
":class:`MapCompose` processor is typically used as input processor, since"
" data is often extracted using the "
":meth:`~scrapy.selector.Selector.extract` method of :ref:`selectors "
"<topics-selectors>`, which returns a list of unicode strings."
msgstr ""

#: ../docs/topics/loaders.rst:726
msgid "The example below should clarify how it works::"
msgstr ""

#: ../docs/topics/loaders.rst:736
msgid ""
"As with the Compose processor, functions can receive Loader contexts, and"
" constructor keyword arguments are used as default context values. See "
":class:`Compose` processor for more info."
msgstr ""

#: ../docs/topics/loaders.rst:742
msgid ""
"Queries the value using the json path provided to the constructor and "
"returns the output. Requires jmespath "
"(https://github.com/jmespath/jmespath.py) to run. This processor takes "
"only one input at a time."
msgstr ""

#: ../docs/topics/loaders.rst:755
msgid "Working with Json::"
msgstr ""

