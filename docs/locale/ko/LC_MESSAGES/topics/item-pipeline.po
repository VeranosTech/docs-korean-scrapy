# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-13 13:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../docs/topics/item-pipeline.rst:5
msgid "Item Pipeline"
msgstr "아이템 파이프라인(Item pipeline)"

#: ../docs/topics/item-pipeline.rst:7
msgid ""
"After an item has been scraped by a spider, it is sent to the Item "
"Pipeline which processes it through several components that are executed "
"sequentially."
msgstr ""
"스파이더(spider)로 아이템이 스크랩되면, 아이템은 아이템 파이프라인으로 보내지며 파이프라인에서는 연속적으로 실행되는 여러 "
"구성요소를 통해 아이템을 처리한다."

#: ../docs/topics/item-pipeline.rst:10
msgid ""
"Each item pipeline component (sometimes referred as just \"Item "
"Pipeline\") is a Python class that implements a simple method. They "
"receive an item and perform an action over it, also deciding if the item "
"should continue through the pipeline or be dropped and no longer "
"processed."
msgstr ""
"각 아이템 파이프라인의 구성요소는 (때로는 단순히 \"아이템 파이프라인\"으로 불린다) 간단한 메서드를 구현한 파이썬 클래스다. "
"파이프라인은 아이템을 받아서 동작을 수행하며, 파이프라인을 지나서도 유지되야 하는지 또는 더이상 처리되지 않고 버려져야 하는지도 "
"결정한다."

#: ../docs/topics/item-pipeline.rst:15
msgid "Typical uses of item pipelines are:"
msgstr "일반적인 아이템 파이프라인의 사용 목적은 다음과 같다:"

#: ../docs/topics/item-pipeline.rst:17
msgid "cleansing HTML data"
msgstr "HTML 데이터 정리"

#: ../docs/topics/item-pipeline.rst:18
msgid "validating scraped data (checking that the items contain certain fields)"
msgstr "스크랩 데이터 유효성 검사 (아이템이 특정 필드를 포함하고 있는지)"

#: ../docs/topics/item-pipeline.rst:19
msgid "checking for duplicates (and dropping them)"
msgstr "중복 확인 (중복 아이템 제거)"

#: ../docs/topics/item-pipeline.rst:20
msgid "storing the scraped item in a database"
msgstr "스크랩 아이템 데이터베이스에 저장"

#: ../docs/topics/item-pipeline.rst:24
msgid "Writing your own item pipeline"
msgstr "아이템 파이프라인 제작하기"

#: ../docs/topics/item-pipeline.rst:26
msgid ""
"Each item pipeline component is a Python class that must implement the "
"following method:"
msgstr "각 아이템 파이프라인 구성요소는 반드시 아래의 메서드를 구현한 파이썬 클래스여야 한다:"

#: ../docs/topics/item-pipeline.rst:30
msgid ""
"This method is called for every item pipeline component. "
":meth:`process_item` must either: return a dict with data, return an "
":class:`~scrapy.item.Item` (or any descendant class) object, return a "
"`Twisted Deferred`_ or raise :exc:`~scrapy.exceptions.DropItem` "
"exception. Dropped items are no longer processed by further pipeline "
"components."
msgstr ""
"이 메서드는 모든 아이템 파이프라인 구성요소에 대해 호출된다. :meth:`process_item`\\ 는 반드시 데이터가 있는 "
"딕셔너리나, :class:`~scrapy.item.Item` 객체, 또는 `Twisted Deferred`_\\ 를 반환하거나 "
":exc:`~scrapy.exceptions.DropItem` 예외를 발생시켜야 한다. 드랍된 아이템은 이후의 파이프라인 구성요소로"
" 처리되지 않는다."

#: ../docs/topics/item-pipeline.rst
msgid "Parameters"
msgstr "Parameters"

#: ../docs/topics/item-pipeline.rst:36
msgid "the item scraped"
msgstr "스크랩 된 아이템"

#: ../docs/topics/item-pipeline.rst:39
msgid "the spider which scraped the item"
msgstr "아이템을 스크랩하는 스파이더"

#: ../docs/topics/item-pipeline.rst:42
msgid "Additionally, they may also implement the following methods:"
msgstr "또한 다음 메서드도 구현할 수 있다:"

#: ../docs/topics/item-pipeline.rst:46
msgid "This method is called when the spider is opened."
msgstr "이 메서드는 스파이더가 열렸을 때 호출된다."

#: ../docs/topics/item-pipeline.rst:48
msgid "the spider which was opened"
msgstr "열린 스파이더"

#: ../docs/topics/item-pipeline.rst:53
msgid "This method is called when the spider is closed."
msgstr "이 메서드는 스파이더가 닫혔을 때 호출된다."

#: ../docs/topics/item-pipeline.rst:55
msgid "the spider which was closed"
msgstr "닫힌 스파이더"

#: ../docs/topics/item-pipeline.rst:60
msgid ""
"If present, this classmethod is called to create a pipeline instance from"
" a :class:`~scrapy.crawler.Crawler`. It must return a new instance of the"
" pipeline. Crawler object provides access to all Scrapy core components "
"like settings and signals; it is a way for pipeline to access them and "
"hook its functionality into Scrapy."
msgstr ""
"존재할 경우, 이 클래스 메서드는 :class:`~scrapy.crawler.Crawler`\\ 로 파이프라인 인스턴스를 "
"생성하기위해 호출된다. 반드시 새로운 파이프라인 인스턴스를 반환해야 한다. 크롤러(Crawler) 객체는 설정정과 "
"시그널(signal) 같은 모든 스크래피 핵심 구성요소에 접근할 수 있게 해준다; 이것이 파이프라인이 구성요소에 접근하고 스크래피에"
" 기능을 연결하는 방법이다."

#: ../docs/topics/item-pipeline.rst:66
msgid "crawler that uses this pipeline"
msgstr "이 파이프라인을 사용하는 크롤러"

#: ../docs/topics/item-pipeline.rst:73
msgid "Item pipeline example"
msgstr "아이템 파이프라인 예시"

#: ../docs/topics/item-pipeline.rst:76
msgid "Price validation and dropping items with no prices"
msgstr "가격 유효성 검사 및 가격 미포함 아이템 드랍"

#: ../docs/topics/item-pipeline.rst:78
msgid ""
"Let's take a look at the following hypothetical pipeline that adjusts the"
" ``price`` attribute for those items that do not include VAT "
"(``price_excludes_vat`` attribute), and drops those items which don't "
"contain a price::"
msgstr ""
"VAT(``price_excludes_vat`` 속성)를 포함하지 않은 아이템의 ``price`` 속성을 수정하고 가격을 포함하지 "
"않은 아이템을 버리는 가상의 파이프라인을 살펴보자::"

#: ../docs/topics/item-pipeline.rst:99
msgid "Write items to a JSON file"
msgstr "아이템을 JSON 파일로 쓰기"

#: ../docs/topics/item-pipeline.rst:101
msgid ""
"The following pipeline stores all scraped items (from all spiders) into a"
" single ``items.jl`` file, containing one item per line serialized in "
"JSON format::"
msgstr ""
"아래의 파이프라인은 (모든 스파이더에서) 스크랩된 모든 아이템을 하나의 ``item.jl`` 파일에 저장한다. 하나의 아이템은 "
"JSON 포맷으로 직렬화된 한 줄로 나타난다::"

#: ../docs/topics/item-pipeline.rst:120
msgid ""
"The purpose of JsonWriterPipeline is just to introduce how to write item "
"pipelines. If you really want to store all scraped items into a JSON file"
" you should use the :ref:`Feed exports <topics-feed-exports>`."
msgstr ""
"JsonWriterPipeline의 목적은 아이템 파이프라인을 어떻게 작성하는지 소개하기 위해서다. 만약 정말로 스크랩된 모든 "
"데이터를 JOSN 파일로 저장하려면 :ref:`Feed exports <topics-feed-exports>`\\ 를 사용해야 "
"한다."

#: ../docs/topics/item-pipeline.rst:125
msgid "Write items to MongoDB"
msgstr "MongoDB에 아이템 작성하기"

#: ../docs/topics/item-pipeline.rst:127
msgid ""
"In this example we'll write items to MongoDB_ using pymongo_. MongoDB "
"address and database name are specified in Scrapy settings; MongoDB "
"collection is named after item class."
msgstr ""
"아래의 예에서 우리는 `pymongo_`\\ 를 사용해서 `MongoDB_`\\ 에 아이템을 작성할 것이다. MongoDB 주소와 "
"데이터베이스 이름은 스크래피 설정에서 지정되었다; MongoDB 집합의 이름은 아이템 클래스에서 따라 지었다."

#: ../docs/topics/item-pipeline.rst:131
msgid ""
"The main point of this example is to show how to use :meth:`from_crawler`"
" method and how to clean up the resources properly.::"
msgstr ""
"이 예의 주요 포인트는 :meth:`from_crawler` 메서드를 사용하는 방법과 리소스를 적절하게 정리하는 방법을 보여주는 "
"것이다::"

#: ../docs/topics/item-pipeline.rst:167
msgid "Take screenshot of item"
msgstr "아이템의 스크린샷 찍기"

#: ../docs/topics/item-pipeline.rst:169
msgid ""
"This example demonstrates how to return Deferred_ from "
":meth:`process_item` method. It uses Splash_ to render screenshot of item"
" url. Pipeline makes request to locally running instance of Splash_. "
"After request is downloaded and Deferred callback fires, it saves item to"
" a file and adds filename to an item."
msgstr ""
"이 예제는 :meth:`process_item` 메서드에서 `Deferred`_\\ 를 반환하는 방법을 설명한다. 이 메서드는 "
"아이템 url의 스크린샷을 렌더링하기 위해 `Splash`_\\ 를 사용한다.파이프라인은 로컬에서 `Splash`_\\ 의 "
"인스턴스를 실행하도록 요청한다. 리퀘스트가 다운로드된 후에 지연 콜백이 일어나면, 아이템을 파일에 저장하고 파일명을 아이템에 "
"추가한다::"

#: ../docs/topics/item-pipeline.rst:215
msgid "Duplicates filter"
msgstr "중복 필터"

#: ../docs/topics/item-pipeline.rst:217
msgid ""
"A filter that looks for duplicate items, and drops those items that were "
"already processed. Let's say that our items have a unique id, but our "
"spider returns multiples items with the same id::"
msgstr ""
"중복된 아이템을 찾고, 이미 처리된 아이템을 드랍하는 필터. 아이템이 교유한 id를 가지고 있지만 스파이더가 동일한 id를 가진 "
"다수의 아이템을 반환한다고 가정하자::"

#: ../docs/topics/item-pipeline.rst:238
msgid "Activating an Item Pipeline component"
msgstr "아이템파이프라인 구성요소"


#: ../docs/topics/item-pipeline.rst:240
msgid ""
"To activate an Item Pipeline component you must add its class to the "
":setting:`ITEM_PIPELINES` setting, like in the following example::"
msgstr ""
"아이템 파이프라인 구성요소를 활성화하려면 반드시 그 클래스를 아래 예시처럼 :setting:`ITEM_PIPELINES` 세팅에 "
"추가해야 한다::"

#: ../docs/topics/item-pipeline.rst:248
msgid ""
"The integer values you assign to classes in this setting determine the "
"order in which they run: items go through from lower valued to higher "
"valued classes. It's customary to define these numbers in the 0-1000 "
"range."
msgstr ""
"이 세팅에서 클래스에 할당한 정수값은 실행되는 순서를 결정한다: 아이템은 낮은 값에서부터 높은 값을 가진 클래스를 빠져나간다. "
"0-1000 범위로 정의하는 것이 일반적이다."
